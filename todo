#!/usr/bin/env python

import os
import sys
import json

from clint import args, resources
from clint.textui import puts, indent, colored

class Todo:

  allowed_commands = ['list', 'add', 'finish', 'delete']

  def __enter__(self):
    self.todo = []
    resources.init('joshbenham', 'Todo')

    try:
      file = resources.user.open('todo.json')
    except IOError:
      resources.user.write('todo.json', '')
      file = resources.user.open('todo.json')

    if file.read():
      self.todo = json.loads(resources.user.read('todo.json'))

    return self

  def __exit__(self, type, value, traceback):
    if not self.todo:
      self.todo = []

    resources.user.write('todo.json', json.dumps(self.todo))

  def list(self):
    if not self.todo:
      puts(colored.red('You do not have and todo items'))
    else:
      for idx, todo in enumerate(self.todo):
        number = colored.green('#' + str(idx+1)) if todo['status'] == 'open' else colored.red('#' + str(idx+1))
        puts(number + ' - ' + todo['item'])

  def add(self):
    self.todo.append({
      'item': ' '.join(args.all),
      'status': 'open'
    })
    puts(colored.green('You have added a new todo item: ' + ' '.join(args.all)))

  def finish(self):
    try:
      count = int(args.all[0])-1
      if self.todo[count]:
        puts(colored.green('You have finished: ' + self.todo[count]['item']))
        self.todo[count]['status'] = 'closed'
    except IndexError:
      puts(colored.red('You did not supply an item number or it does not exist'))

  def delete(self):
    try:
      count = int(args.all[0])-1
      if self.todo[count]:
        puts(colored.green('You have deleted: ' + self.todo[count]['item']))
        del self.todo[count]
    except IndexError:
      puts(colored.red('You did not supply an item number or it does not exist')) 

  @staticmethod
  def usage():
    puts(colored.green('Usage:'))
    with indent(2):
      puts(colored.red('$') + 'todo list')
      puts(colored.red('$') + 'todo add <message>')
      puts(colored.red('$') + 'todo finish <number>')
      puts(colored.red('$') + 'todo delete <number>')

if __name__ == "__main__":
  if args.grouped['_'].get(0) in Todo.allowed_commands:
    method = args.grouped['_'].get(0)
    args.pop(0)

    with Todo() as app:
      getattr(app, method)()
  else:
    Todo.usage()
